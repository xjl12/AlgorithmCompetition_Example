/*************************************************************************
 * 在一个数组中找出和最大的连续几个数。（至少包含一个数）
 * 例如：数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6.
 * 第一行输入一个不超过1000的整数n。
 * 第二行输入n个整数A[i]。
 * 输出一个整数，表示最大的和。
 ***************************************************************************/
#include <iostream>
using namespace std;
int main()
{
    int n, t;
    cin >> n;
    int *dat = new int[n]; // 保存原始数据
    // dp[i]代表从数组开头到第i个元素（必须含第i个元素）的连续子序列和最大值
    int *dp = new int[n];
    for (int i = 0; i < n; i++)
    {
        cin >> dat[i];
    }
    dp[0] = dat[0]; // 边界条件
    for (int i = 1; i < n; i++)
    {
        // 递推关系式，分别对应与前面合并、单独一个的情况
        dp[i] = max(dp[i - 1] + dat[i], dat[i]);
    }
    t = dp[0];
    for (int i = 1; i < n; i++)
    {
        // 从dp[i]中挑选一个最大的就是答案
        t = max(t, dp[i]);
    }
    cout << t;
}